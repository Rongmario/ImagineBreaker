plugins {
    id 'java'
    id 'maven-publish'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.7'
}

group 'zone.rong'
version '3.0'

java {
    toolchain {
        sourceCompatibility = JavaVersion.VERSION_1_9
        targetCompatibility = JavaVersion.VERSION_1_9
        languageVersion = JavaLanguageVersion.of(9)
    }
    withSourcesJar()
    withJavadocJar()
}

sourceSets {
    panama {
        compileClasspath += main.output
        runtimeClasspath += main.output
        sourceCompatibility = JavaVersion.VERSION_22
        targetCompatibility = JavaVersion.VERSION_22
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.jspecify:jspecify:1.0.0'

    testImplementation platform('org.junit:junit-bom:5.12.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

test {
    enabled = false
}

tasks.named('compilePanamaJava') {
    it.javaCompiler = javaToolchains.compilerFor { JavaToolchainSpec toolchain ->
        toolchain.languageVersion = JavaLanguageVersion.of(22)
        toolchain.vendor = JvmVendorSpec.AZUL
    }
}

def targetVendors = [
        (JvmVendorSpec.AZUL): ["Azul", 9, 11, 17, 21, 22, 23, 24],
        (JvmVendorSpec.GRAAL_VM): ["Graal", 9, 11, 17, 21, 22, 23, 24],
        (JvmVendorSpec.IBM): ["OpenJ9", 9, 11, 17, 21, 22, 23, 24],
]

tasks.register('comprehensiveTest') {
    group 'verification'
}

targetVendors.each { spec, info ->
    for (int i = 1; i < info.size(); i++) {
        Integer javaVersion = info[i]
        def testTask = tasks.register("test${info[0]}_${javaVersion}", Test) { Test test ->
            group 'verification'
            test.javaLauncher = javaToolchains.launcherFor { JavaToolchainSpec toolchain ->
                toolchain.languageVersion = JavaLanguageVersion.of(javaVersion)
                toolchain.vendor = spec
            }
            test.useJUnitPlatform()
        }
        comprehensiveTest.configure {
            dependsOn testTask
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            sourcesJar
            javadocJar
            artifactId = 'imaginebreaker'
        }
    }
    repositories {
        maven {
            name = 'CleanroomMaven'
            url = 'https://repo.cleanroommc.com/releases'
            credentials(PasswordCredentials)
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
}